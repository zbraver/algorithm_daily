class Node:
    def __init__(self, val):
        self.val = val
        self.next = None


class LinkList:
    def __init__(self):
        self._head = Node(0)
        self._count = 0

    def get(self, index):
        '''获取链表中第 index 个节点的值。如果索引无效，则返回-1'''
        if 0 <= index < self._count:
            node = self._head
            for _ in range(index + 1):
                node = node.next
            return node.val
        else:
            return -1

    def addAtHead(self, val):
        '''在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点'''
        self.addAtIndex(0, val)

    def addAtTail(self, val):
        '''将值为 val 的节点追加到链表的最后一个元素'''
        self.addAtIndex(self._count, val)

    def addAtIndex(self, index, val):
        '''在链表中的第 index 个节点之前添加值为 val的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。
        如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。'''
        if index < 0:  # index小于0,在头部插入数据
            index = 0
        elif index > self._count:  # 大于链表长度不插入
            return
        # 计数加1
        self._count += 1
        add_node = Node(val)
        prev_node, current_node = None, self._head
        for _ in range(index + 1):  # 常规在头部插入
            prev_node, current_node = current_node, current_node.next  # 有问题
        else:  # 附加到链表的末尾
            prev_node.next, add_node.next = add_node, current_node

    def deleteAtIndex(self, index):
        '''索引 index 有效，则删除链表中的第 index 个节点'''
        if 0 <= index < self._count:
            self._count -= 1
            prev_node, current_node = None, self._head
            for _ in range(index + 1):
                prev_node, current_node.next = current_node.next, None

if __name__ == '__main__':
    demo = LinkList()
    demo.addAtIndex(1,2)
    demo.addAtIndex(0,3)
    demo.addAtIndex(2,3)
    print(demo.get(1))
